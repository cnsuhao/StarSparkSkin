<?xml version="1.0" encoding="utf-8"?>

<!--

ADOBE SYSTEMS INCORPORATED
Copyright 2008 Adobe Systems Incorporated
All Rights Reserved.

NOTICE: Adobe permits you to use, modify, and distribute this file
in accordance with the terms of the license agreement accompanying it.

-->

<!---
The default skin class for Spark TabBar buttons.

@see spark.components.TabBar
@see spark.skins.spark.TabBarSkin

@langversion 3.0
@playerversion Flash 10
@playerversion AIR 1.5
@productversion Flex 4
-->

<s:SparkButtonSkin xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:s="library://ns.adobe.com/flex/spark"
				   xmlns:fb="http://ns.adobe.com/flashbuilder/2009" minWidth="21" minHeight="21" alpha.disabled="0.5" autoIconManagement="false">

	<!-- host component -->
	<fx:Metadata>
		<![CDATA[ 
		/** 
		* @copy spark.skins.spark.ApplicationSkin#hostComponent
		*/
		[HostComponent("spark.components.ButtonBarButton")]
		]]>
	</fx:Metadata>

	<fx:Script fb:purpose="styling">
		<![CDATA[
			import mx.events.FlexEvent;
			
			import spark.components.TabBar;
			
			import starskin.events.TabCloseEvent;

			static private const exclusions:Array = [ "labelDisplay" ];

			override public function get colorizeExclusions():Array
			{
				return exclusions;
			}

			override protected function initializationComplete():void
			{
				useChromeColor = true;
				super.initializationComplete();
			}

			private var cornerRadius:Number = 2;

			/**
			 *  @private
			 *  The cornerRadius style is specified by the TabBar, not the button itself.
			 *
			 *  Rather than bind the corner radius properties of the s:Rect's in the markup
			 *  below to hostComponent.owner.getStyle("cornerRadius"), we reset them here,
			 *  each time a change in the value of the style is detected.  Note that each
			 *  corner radius property is explicitly initialized to the default value of
			 *  the style; the initial value of the private cornerRadius property.
			 */
			private function updateCornerRadius():void
			{
				var cr:Number = getStyle( "cornerRadius" );

				if( cornerRadius != cr )
				{
					cornerRadius = cr;
					fill.topLeftRadiusX = cornerRadius;
					fill.topRightRadiusX = cornerRadius;
				}
			}

			override protected function updateDisplayList( unscaledWidth:Number, unscaleHeight:Number ):void
			{
				updateCornerRadius();

				if( getStyle( "paddingLeft" ))
					contentGroup.paddingLeft = getStyle( "paddingLeft" );

				if( getStyle( "paddingRight" ))
					contentGroup.paddingRight = getStyle( "paddingRight" );

				if( getStyle( "paddingTop" ))
					contentGroup.paddingTop = getStyle( "paddingTop" );

				if( getStyle( "paddingBottom" ))
					contentGroup.paddingBottom = getStyle( "paddingBottom" );

				super.updateDisplayList( unscaledWidth, unscaledHeight );
			}

			protected function closeButton_clickHandler( event:MouseEvent ):void
			{
				event.stopPropagation();
				this.hostComponent.dispatchEvent( new Event( TabCloseEvent.CLOSE ));
			}
		]]>

	</fx:Script>

	<!-- states -->
	<s:states>
		<s:State name="up" />
		<s:State name="over" stateGroups="overStates" />
		<s:State name="down" stateGroups="downStates" />
		<s:State name="disabled" stateGroups="disabledStates" />
		<s:State name="upAndSelected" stateGroups="selectedStates, selectedUpStates" />
		<s:State name="overAndSelected" stateGroups="overStates, selectedStates" />
		<s:State name="downAndSelected" stateGroups="downStates, selectedStates" />
		<s:State name="disabledAndSelected" stateGroups="selectedUpStates, disabledStates, selectedStates" />
	</s:states>

	<!-- layer 1: fill -->
	<s:Rect id="fill" left="0" right="0" top="0" bottom="0" topLeftRadiusX="2" topRightRadiusX="2">
		<s:fill>
			<s:SolidColor id="backFill" color="0xF0F5F9" color.selectedStates="0xfcfcfc" />
		</s:fill>
		<s:stroke>
			<s:SolidColorStroke id="border" color="0xD4DEE5" alpha="1" />
		</s:stroke>
	</s:Rect>

	<s:Rect left="1" right="1" bottom="0" height="1">
		<s:fill>
			<s:SolidColor id="botBorderFill" color="0xD4DEE5" color.selectedStates="0xfcfcfc" />
		</s:fill>
	</s:Rect>

	<s:HGroup id="contentGroup" left="0" right="20" top="0" bottom="0" horizontalAlign="left" verticalAlign="middle" paddingLeft="5">
		<s:BitmapImage id="iconDisplay" />

		<!-- layer 8: text -->
		<!--- @copy spark.components.supportClasses.ButtonBase#labelDisplay -->
		<s:Label id="labelDisplay" color="0x667788" color.selectedStates="0x333333" textAlign="left" maxDisplayedLines="1" baselineShift="-1">
		</s:Label>
	</s:HGroup>

	<!--- @copy spark.components.TitleWindow#closeButton -->
	<s:Button id="closeButton" useHandCursor="true" buttonMode="true" skinClass="starskin.skins.TitleWindowCloseButtonSkin" right="0"
			  verticalCenter="0" visible="false" visible.over="true" visible.down="true" visible.selectedStates="true"
			  click="closeButton_clickHandler(event)" />

</s:SparkButtonSkin>
