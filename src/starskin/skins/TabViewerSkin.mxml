<?xml version="1.0" encoding="utf-8"?>

<!--

	ADOBE SYSTEMS INCORPORATED
	Copyright 2008 Adobe Systems Incorporated
	All Rights Reserved.

	NOTICE: Adobe permits you to use, modify, and distribute this file
	in accordance with the terms of the license agreement accompanying it.

-->

<!--- The default skin class for a Spark SkinnableContainer container.

	 @see spark.components.SkinnableContainer

	  @langversion 3.0
	  @playerversion Flash 10
	  @playerversion AIR 1.5
	  @productversion Flex 4
-->
<s:Skin xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:s="library://ns.adobe.com/flex/spark" xmlns:fb="http://ns.adobe.com/flashbuilder/2009"
		xmlns:comps="starskin.comps.*" xmlns:mx="library://ns.adobe.com/flex/mx" minWidth="100" alpha.disabled="0.5">
	<fx:Metadata>
		[HostComponent("starskin.comps.TabViewer")]
	</fx:Metadata>

	<fx:Script fb:purpose="styling">
		<![CDATA[
			import spark.layouts.HorizontalAlign;

			private var _tabOffset:Number = 0;

			override protected function updateDisplayList( unscaledWidth:Number, unscaledHeight:Number ):void
			{
				if( getStyle( "tabSkinClass" ))
				{
					tabBar.setStyle( "tabSkinClass", getStyle( "tabSkinClass" ));
				}

				if( getStyle( "borderColor" ))
				{
					borderColor.color = tabBorder.color = getStyle( "borderColor" );
				}

				if( getStyle( "backgroundColor" ))
				{
					backColor.color = tabFill.color = getStyle( "backgroundColor" );
				}

				if( getStyle( "tabBackgroundVisible" ) != undefined )
				{
					tabBackground.visible = getStyle( "tabBackgroundVisible" );
				}

				if( getStyle( "cornerRadius" ))
				{
					tabBar.setStyle( "cornerRadius", getStyle( "cornerRadius" ));
				}

				if( getStyle( "tabWidth" ))
				{
					tabBar.setStyle( "tabWidth", getStyle( "tabWidth" ));
				}

				if( getStyle( "tabHeight" ))
				{
					background.top = tabBackground.height = getStyle( "tabHeight" ) - 1;
					tabBar.setStyle( "tabHeight", getStyle( "tabHeight" ));
				}

				if( getStyle( "tabAlign" ))
				{
					controlGroup.horizontalAlign = getStyle( "tabAlign" );
				}

				if( getStyle( "tabGap" ))
				{
					tabBar.setStyle( "gap", getStyle( "tabGap" ));
				}

				if( _tabOffset != getStyle( "tabOffset" ))
				{
					_tabOffset = getStyle( "tabOffset" );

					switch( controlGroup.horizontalAlign )
					{
						case HorizontalAlign.RIGHT:
						{
							tabBar.setStyle( "paddingLeft", null );
							tabBar.setStyle( "paddingRight", _tabOffset );
							break;
						}
						case HorizontalAlign.CENTER:
						default:
						{
							tabBar.setStyle( "paddingLeft", _tabOffset );
							tabBar.setStyle( "paddingRight", null );
						}
					}
				}

				if( getStyle( "tabPaddingLeft" ))
					tabBar.setStyle( "tabPaddingLeft", getStyle( "tabPaddingLeft" ));
				
				if( getStyle( "tabPaddingRight" ))
					tabBar.setStyle( "tabPaddingRight", getStyle( "tabPaddingRight" ));
				
				if( getStyle( "tabPaddingTop" ))
					tabBar.setStyle( "tabPaddingTop", getStyle( "tabPaddingTop" ));
				
				if( getStyle( "tabPaddingBottom" ))
					tabBar.setStyle( "tabPaddingBottom", getStyle( "tabPaddingBottom" ));

				super.updateDisplayList( unscaledWidth, unscaledHeight );
			}
		]]>
	</fx:Script>

	<s:states>
		<s:State name="normal" />
		<s:State name="disabled" />
	</s:states>

	<s:Rect id="background" left="0" right="0" top="{tabBar.height-1}" bottom="0">
		<s:fill>
			<s:SolidColor id="backColor" color="#ffffff" />
		</s:fill>
		<s:stroke>
			<s:SolidColorStroke id="borderColor" color="0xD4DEE5" weight="1" />
		</s:stroke>
	</s:Rect>

	<s:Rect id="tabBackground" left="0" right="0" top="0" height="{tabBar.height-1}">
		<s:fill>
			<s:SolidColor id="tabFill" color="#f3f3f3" />
		</s:fill>
		<s:stroke>
			<s:SolidColorStroke id="tabBorder" color="0xD4DEE5" weight="1" />
		</s:stroke>
	</s:Rect>

	<s:VGroup id="controlGroup" left="0" right="0" top="0" bottom="0" gap="0">
		<comps:TabBar id="tabBar" minHeight="18" dataProvider="{viewStack}" skinClass="starskin.skins.TabBarSkin" />
		<mx:ViewStack id="viewStack" width="100%" height="100%" minHeight="50" paddingLeft="1" paddingRight="1" paddingTop="1" paddingBottom="1" />
	</s:VGroup>

	<!--- @copy spark.components.SkinnableContainer#contentGroup -->
	<s:Group id="contentGroup" visible="false">
		<s:layout>
			<s:BasicLayout />
		</s:layout>
	</s:Group>

</s:Skin>
