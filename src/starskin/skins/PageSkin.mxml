<?xml version="1.0" encoding="utf-8"?>

<!--

ADOBE SYSTEMS INCORPORATED
Copyright 2008 Adobe Systems Incorporated
All Rights Reserved.

NOTICE: Adobe permits you to use, modify, and distribute this file
in accordance with the terms of the license agreement accompanying it.

-->

<!--- The default skin class for a Spark Panel container.

@see spark.components.Panel

@langversion 3.0
@playerversion Flash 10
@playerversion AIR 1.5
@productversion Flex 4
-->
<s:SparkSkin xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:s="library://ns.adobe.com/flex/spark" xmlns:fb="http://ns.adobe.com/flashbuilder/2009"
			 mouseEnabled="false" minWidth="120" minHeight="100" alpha.disabled="0.5" alpha.disabledWithControlBar="0.5">

	<fx:Metadata>
		<![CDATA[ 
		/** 
		* @copy spark.skins.spark.ApplicationSkin#hostComponent
		*/
		[HostComponent("spark.components.Panel")]
		]]>
	</fx:Metadata>

	<fx:Script fb:purpose="styling">
		<![CDATA[
			import mx.core.FlexVersion;
			import mx.events.FlexMouseEvent;

			import spark.core.IViewport;

			/* Define the skin elements that should not be colorized.
			For panel, border and title background are skinned, but the content area, background, border, and title text are not. */
			static private const exclusions:Array = [ "background", "titleDisplay", "contentGroup", "controlBarGroup", "border" ];

			override public function get colorizeExclusions():Array
			{
				return exclusions;
			}

			override protected function initializationComplete():void
			{
				useChromeColor = true;
				super.initializationComplete();
			}

			override protected function updateDisplayList( unscaledWidth:Number, unscaledHeight:Number ):void
			{
				var showHeader:Boolean = getStyle( "showHeader" ) == false ? false : true;
				topGroup.visible = showHeader;
				topGroup.includeInLayout = showHeader;

				var headBackColor:* = getStyle( "headerBackColor" );

				if( headBackColor )
				{
					bgFill.color = headBackColor;
				}

				super.updateDisplayList( unscaledWidth, unscaledHeight );
			}

			protected function scroller_mouseWheelChangingHandler( event:FlexMouseEvent ):void
			{
				event.preventDefault();

				var modifier:int = 8;
				var delta:Number = Number( event.delta ) * modifier;
				var viewport:IViewport = scroller.verticalScrollBar.viewport;
				var vPos:Number = viewport.verticalScrollPosition;
				var maximum:Number = scroller.verticalScrollBar.maximum;

				if( delta < 0 )
				{
					scroller.verticalScrollBar.viewport.verticalScrollPosition = Math.min( vPos - delta, maximum );
				}
				else
				{
					scroller.verticalScrollBar.viewport.verticalScrollPosition = Math.max( vPos - delta, 0 );
				}
			}
		]]>
	</fx:Script>

	<s:states>
		<s:State name="normal" />
		<s:State name="disabled" />
		<s:State name="normalWithControlBar" stateGroups="withControls" />
		<s:State name="disabledWithControlBar" stateGroups="withControls" />
	</s:states>

	<!--- Contains the vertical stack of titlebar content and controlbar. -->
	<s:Group left="0" top="0" right="0" bottom="0" id="contents">
		<s:layout>
			<s:VerticalLayout gap="1" horizontalAlign="justify" />
		</s:layout>

		<!--- @private -->
		<s:Group id="topGroup" height="40">

			<s:Rect id="background" left="0" right="0" top="0" bottom="0">
				<s:fill>
					<s:SolidColor id="bgFill" color="0xffffff" />
				</s:fill>
			</s:Rect>

			<s:Path width="9" height="12" data="M 0 0 L 9 6 L 0 12 L 0 0 Z" left="20" verticalCenter="0">
				<s:stroke>
					<s:SolidColorStroke color="0xC0D1E9" />
				</s:stroke>
				<s:fill>
					<s:SolidColor color="0xffffff" />
				</s:fill>
			</s:Path>

			<!--- @copy spark.components.Panel#titleDisplay -->
			<s:Label id="titleDisplay" left="40" verticalCenter="0" color="0xBACCDD" fontWeight="bold" maxDisplayedLines="1" textAlign="start"
					 verticalAlign="middle" fontSize="14">
			</s:Label>
		</s:Group>

		<!--- @copy spark.components.SkinnableContainer#contentGroup -->
		<s:Scroller width="100%" height="100%" id="scroller" horizontalScrollPolicy="auto" verticalScrollPolicy="auto" minViewportInset="1"
					hasFocusableChildren="true" mouseWheelChanging="scroller_mouseWheelChangingHandler(event)">
			<s:Group id="contentGroup" width="100%" minHeight="100">
			</s:Group>
		</s:Scroller>

		<!--- @private -->
		<s:Group id="bottomGroup" minWidth="0" minHeight="0" includeIn="normalWithControlBar, disabledWithControlBar">

			<s:Group left="0" right="0" top="0" bottom="0">

				<!-- layer 0: control bar divider line -->
				<s:Rect left="0" right="0" top="0" height="1">
					<s:fill>
						<s:SolidColor color="0xD4DEE5" id="bottomLiner" />
					</s:fill>
				</s:Rect>

				<!-- layer 2: control bar fill -->
				<s:Rect left="0" right="0" top="1" bottom="0">
					<s:fill>
						<s:SolidColor color="#F2F5F7" />
					</s:fill>
				</s:Rect>
			</s:Group>
			<!-- layer 3: control bar -->
			<!--- @copy spark.components.Panel#controlBarGroup -->
			<s:Group id="controlBarGroup" left="0" right="0" top="1" bottom="1" minWidth="0" minHeight="0">
				<s:layout>
					<s:HorizontalLayout paddingLeft="10" paddingRight="10" paddingTop="7" paddingBottom="7" gap="10" />
				</s:layout>
			</s:Group>
		</s:Group>


	</s:Group>

</s:SparkSkin>
